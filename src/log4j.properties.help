# log=/media/alexander/HDD/Workspace/Projects/QA/QAcourse/src/log - путь, куда будем логироваться.

# log4j.rootLooger=TRACE, CONSOLE, log_file - настройка логгера по умолчанию.
    Первый элемент идет уровень сообщений который нужно перехватывать (и все выше него), в
    данном случае это TRACE. Следующие два элемента это названия appender'ов, настроек с
    помощью которых вести логирование.

    * Настройки уровней и логгеров идут от rootLogger а далее по пакетам и классам.
        Получается мы можем сделать одни настройки для пакета com.company.project,
        а потом расширить эти настройки для пакета com.company.project.foobar.

# log4j.appender.log_file=org.apache.log4j.RollingFileAppender - пакет, который пишет в файл.

# log4j.appender.log_file_path=${log}/all_log.txt - задаем путь, куда будет писаться файл(@log_file).
    ${log}/... - передаем "быстро путь" и указываем имя файла.

# log4j.appender.log_file.MaxFileSize=1024KB - размер файла для логирования.
    (будет новый файл создаваться, если файл > 1024KB)

# log4j.appender.log_file.MaxBackupIndex=1000 - максимальное число отображающих логов, иначе, начинает
    затираеи старые логи.

# log4j.appender.log_file.layout=org.apache.log4j.PatternLayout - форматтер (определяет, как форматировать
    вывод лога)

# log4j.appender.log_file.layout.conversionPattern=%d{ABSOLUTE} %5p %t %c{1}:%M:%L - %m%n - задаем параметры,
    для шаблона вывода:

    - %d{ABSOLUTE} выводит время.
        В скобках можно указать формат вывода, о нем подробней можно прочитать в хэлпе к стандартному
        классу SimpleDateFormat. И еще можно использовать именованные шаблоны, как в данном случае,
        это ISO8601 и ABSOLUTE. Последний означает формат HH:mm:ss,SSS.
    - %5p выводит уровень лога (ERROR, DEBUG, INFO и пр.), цифра 5 означает что всегда использовать
        5 символов, остальное дополнится пробелами.
    - %t выводит имя потока который вывел сообщение.
    - %c{1} категория(в скобках указывается сколько уровней выдавать)
        Категорией в нашем случае будет имя класса с пакетом. Ну а вообще это строка,
        где уровни разделены точками. Т.к. у нас совпадает с полным именем класса, то верхний
        уровень будет являться именем класса.
    - %M имя метода в котором произошёл вызов записи в лог.
    - %L номер строки в которой произошёл вызов записи в лог.
    - %m сообщение, которое передали в лог.
    - %n перевод строки.

    * Более подробно можно посмотреть в JavaDoc для класса PatternLayout.

# log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender - пакет, который выводит лог в консоль.

# log4j.appender.CONSOLE.target=System.out - строки, начинающиеся с log4j.appender.CONSOLE. настраивают
    этот appender. Все что идет после указанного префикса должно совпадать со свойством класса,
    т.е. для target должен быть метод setTarget, для layout метод setLayout ну и т.д.

# log4j.appender.debug_file=org.apache.log4j.FileAppender - пакет, который пишет в файл.

# log4j.appender.debug_file.file=QAcourse-debug.log - задаём имя файла для дебаггинга.

     Дебаггинг (отладка) – это этап разработки программы, в ходе которого обнаруживают,
     локализуют и исправляют баги (ошибки).

     Чтобы определить, где находится ошибка, нужно:
        - Узнать текущее значение переменных
        - Выявить, по какому пути выполнялась программа

# log4j.logger.QAcourse.src.homeWork=DEBUG, debug_file - указываеи, что для пакета (QAcourse.src.homeWork)
    выводить все, т.е. всё, начиная с уровнем DEBUG и при этом ещё писать в файл (debug_file), настроенный
    в аппендере.

# log4j.logger.QAcourse.src.homeWork.hw1.loginTest.GoogleAccountLoginTest=INFO - указывает определённый
    класс (GoogleAccountLoginTest), для которого выводить все сообщения начиная с уровня info,
    при этом не указывая никакого дополнительного аппендера, а значит будут использовать те,
     которые настроены в rootLogger (т.е. вывод в стандартный поток вывода, это к примеру на экран,
     и вывод в файл).






#*link=http://artamonov.ru/2007/04/06/vvedenie-v-log4j/